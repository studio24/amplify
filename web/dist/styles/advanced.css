@charset "UTF-8";
/*------------------------------------*\
    #Amplify: advanced styles for browsers selected by mustard cut
\*------------------------------------*/
/*------------------------------------*\
    #Settings
\*------------------------------------*/
/*------------------------------------*\
    #Breakpoints

    The measurements presented here are for guidance only
    and should be updated to reflect the design/content needs.

    1. Sets a max-inline-size for improved readability
\*------------------------------------*/
/* 1 */
/*------------------------------------*\
    #Colors

    Review and edit these default colours, then add further colors
    as required for your project.

    The ideal color contrast range for meeting WCAG AAA is 7:1 - 15:1

    1. A contrast higher than 15:1 can be triggering, which is why we
    avoid using pure white with pure black.
\*------------------------------------*/
/**
Brand
 */
/**
Accent
 */
/**
Neutrals
 */
/* 1 */
/* 1 */
/**
Links
 */
/**
Focus
 */
/**
Borders
 */
/**
Semantics - used sparingly and purposefully
 */
/*------------------------------------*\
    #Typesetting
\*------------------------------------*/
/**
Use https://www.cssfontstack.com/ and https://meowni.ca/font-style-matcher/ to pick
system fonts that are reasonably close to any web fonts needed for the project.

This improves performance, avoids Flash Of Invisible Text (FOIT) and minimises
Flash of Unstyled Text (FOUT) - see https://www.filamentgroup.com/lab/font-events.html

Be sure to include fonts for both Mac OS and Windows. Use quote marks around
fonts with white space in their name.

When Font Face Observer has detected that the @font-face files are loaded, then we
can safely use the web fonts instead of the system fonts.
 */
/*------------------------------------*\
    #Functions
\*------------------------------------*/
/*------------------------------------*\
    #CSS unit functions
\*------------------------------------*/
/**
 #em
 */
/**
 #rem
 */
/**
 #px
 */
/**
 #Return a number without a unit
 */
/**
 #Remove any unit present to return a unitless number
 */
/*------------------------------------*\
    #Mixins
\*------------------------------------*/
/*------------------------------------*\
    #Font sizes

    Base uses a Major Second scale
    Fluid type calculations generated using https://utopia.fyi/type/calculator at 320px and 1120px widths
\*------------------------------------*/
/* 32px → 40px */
/* 28px → 36px */
/* 25px → 32px */
/* 22px → 28px */
/* 20px → 25px */
/* 18px → 22px */
/* 16px → 20px */
/* 14px → 17px */
/*------------------------------------*\
    #Media query
\*------------------------------------*/
/*------------------------------------*\
    #Stack
\*------------------------------------*/
/**
This mixin allows us to add vertical spacing between a container's direct children,
much like the 'axiomatic owl' technique but limited to specific use cases.

By applying Flexbox to the parent container, we can use auto margin on a specific
child element. This way, we can choose to group elements inside the stack to the
top/bottom of the vertical space, which is useful for card-like components.

Use with a specific measure, or without for the default measure, e.g.

main {
	@include stack(4rem);
}

article {
	@include stack;
}
 */
/*------------------------------------*\
    #Base

    Repeated to allow for extending placeholders
\*------------------------------------*/
/*------------------------------------*\
    #Hide and show items inclusively

    References:
    - https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html
    - https://www.tpgi.com/the-anatomy-of-visually-hidden/
\*------------------------------------*/
/*
 * Hide from everybody and remove from the document flow, using the hidden
 * attribute.
 *
 * Use if a component should remain hidden regardless of CSS being
 * available or not (the style below provides support for legacy browsers).
 */
[hidden] {
  display: none !important;
}

/*
 * Hide from everybody and remove from the document flow, using the %hidden
 * placeholder (extend the placeholder with Sass to avoid it appearing
 * repeatedly in your markup).
 *
 * Use if a component requires a basic show and hide interaction, and the
 * content should become available were CSS to fail.
 */
/*
 * Hide from everybody while maintaining layout, using the %invisible
 * placeholder (extend the placeholder with Sass to avoid it appearing
 * repeatedly in your markup).
 *
 * Use if a more complex transition is required, like when transitioning an
 * off-screen navigation into the viewport. Best paired with other CSS
 * properties that negate its position in the DOM e.g. `position: absolute;`
 */
/*
 * Hide visually only - remains available to Assistive Technology -
 * using the %visually-hidden placeholder (extend the placeholder with
 * Sass to avoid it appearing repeatedly in your markup).
 */
.visuallyhidden:not(:focus, :active) {
  block-size: 1px;
  border: 0;
  -webkit-clip-path: inset(50%);
          clip-path: inset(50%);
  inline-size: 1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
}

/*
 *The :not portions of the following selector allow a means for any
 * focusable element to become visible when focused/active by a user.
 */
br {
  margin-block-start: 0;
}

/*
 * Restore an element that has been visually hidden, using the %visually-hidden
 * placeholder (extend the placeholder with Sass to avoid it appearing
 * repeatedly in your markup).
 */
/*------------------------------------*\
    #Advanced components

    For JS enhancements
\*------------------------------------*/
/*------------------------------------*\
    #Cards advanced
\*------------------------------------*/
.js [data-component=card] {
  cursor: pointer;
}
.js [data-component=card]:hover .card__link {
  text-decoration: underline;
}

/*------------------------------------*\
    #Collapsible sections advanced
\*------------------------------------*/
.js .component--collapsibles__panel {
  padding: 0;
}

.js [data-heading=collapsibles] button {
  align-items: flex-start;
  flex-direction: column;
  inline-size: 100%;
  padding: 1.5625rem;
}
.js [data-heading=collapsibles] button .js-collapsible-heading {
  font-size: clamp(1.125rem, 1.025rem + 0.5vw, 1.375rem);
  line-height: 1.5;
  font-weight: 600;
  text-align: start;
}
.js [data-heading=collapsibles] button .js-collapsible-toggle {
  color: #1371c2;
}
.js [data-heading=collapsibles] button .js-collapsible-label {
  font-size: clamp(0.875rem, 0.8rem + 0.375vw, 1.0625rem);
  line-height: 1.5;
}
.js [data-heading=collapsibles] button:hover .js-collapsible-heading {
  color: #1371c2;
}
.js [data-heading=collapsibles] button:hover .js-collapsible-label {
  text-decoration: underline;
}
.js [data-heading=collapsibles] button[aria-expanded=false] .circle-up {
  display: none;
}
.js [data-heading=collapsibles] button[aria-expanded=true] .circle-down {
  display: none;
}

.js .component--collapsibles__panel__content {
  padding: 1.5625rem;
  padding-block-start: 0;
}
.js .component--collapsibles__panel__content[aria-hidden=true] {
  display: none;
}

/*------------------------------------*\
    #Disclosure widget
\*------------------------------------*/
[data-toggle=true] svg {
  pointer-events: none;
}
[data-toggle=true] + * {
  margin-block-start: 1rem;
}
[data-toggle=true][aria-expanded=false] .expand-less {
  display: none;
}
[data-toggle=true][aria-expanded=false] + * {
  display: none;
}
[data-toggle=true][aria-expanded=true] .expand-more {
  display: none;
}
[data-toggle=true][aria-expanded=true] + * {
  display: block;
}

.no-js [data-toggle=true] {
  display: none;
}
.no-js [data-toggle=true] + * {
  display: initial;
}

/*------------------------------------*\
    #Sortable table
\*------------------------------------*/
amplify-table-sort .arrow-wrapper {
  display: flex;
  flex-direction: column;
  inline-size: 0.9375rem;
  margin-inline-start: 0.75rem;
  pointer-events: none;
}

amplify-table-sort th {
  white-space: nowrap;
}

amplify-table-sort th[data-type=no-sort]:hover {
  cursor: not-allowed;
}

amplify-table-sort th button svg {
  stroke: currentcolor;
  stroke-width: 1.25rem;
}

amplify-table-sort [aria-sort=ascending] button:focus > .arrow-wrapper .asc {
  stroke-width: 3.125rem;
}
amplify-table-sort [aria-sort=ascending] button:focus > .arrow-wrapper .desc {
  opacity: 0.3;
}

amplify-table-sort [aria-sort=descending] button:focus > .arrow-wrapper .asc {
  opacity: 0.3;
}
amplify-table-sort [aria-sort=descending] button:focus > .arrow-wrapper .desc {
  stroke-width: 3.125rem;
}

amplify-table-sort col.js-sorted {
  background-color: rgba(255, 220, 0, 0.1490196078);
}

/*------------------------------------*\
    #Advanced navigation

    Where JS is involved
\*------------------------------------*/
/*------------------------------------*\
    #Navigation advanced

    Starting styles for all advanced navigation patterns.

    Should be accompanied by either /65-advanced-navigation/_nav-double or
    /65-advanced-navigation/_nav-double-with-intro depending on your requirements

    N.B. aria-expanded attribute is managed by JS
\*------------------------------------*/
.js .global-nav {
  /* Prevent offscreen-submenus */
}
.js .global-nav [data-trigger] > * {
  pointer-events: none;
}
.js .global-nav [data-trigger=mobile-nav] > * {
  pointer-events: none;
}
.js .global-nav [data-trigger=mobile-nav] .close {
  display: none;
}
.js .global-nav [data-trigger=mobile-nav] .open {
  display: block;
}
.js .global-nav [data-trigger=mobile-nav][aria-expanded=true] .close {
  display: block;
}
.js .global-nav [data-trigger=mobile-nav][aria-expanded=true] .open {
  display: none;
}
.js .global-nav [aria-expanded=false] + * {
  display: none;
}
.js .global-nav > ul {
  background-color: #fcfcfc;
  inline-size: 100%;
  inset-inline-start: 0;
  position: absolute;
}
@media screen and (min-width: 48em) {
  .js .global-nav > ul {
    align-items: center;
    display: flex;
    inline-size: auto;
    position: static;
  }
}
@media screen and (min-width: 48em) {
  .js .global-nav > ul > li {
    position: relative;
  }
}
@media screen and (min-width: 48em) {
  .js .global-nav > ul > li + li {
    margin-inline-start: 0.3125rem;
  }
}
.js .global-nav [data-nav=submenu] {
  background-color: #fcfcfc;
  padding-inline-start: 0;
}
@media screen and (min-width: 48em) {
  .js .global-nav [data-nav=submenu] {
    inset-inline-start: 0;
    position: absolute;
  }
}
.js .global-nav [data-nav=submenu].js-sub-menu-right {
  inset-inline: auto 0;
}

/*------------------------------------*\
    #Navigation advanced: double level

    There are styles for two versions of navigation here:

    - A "simple" version, where sub menus expand vertically when opened
    on smaller screens.

    - A version where sub menus have a visible "back" button to close them
     on smaller screens because when open they are absolutely positioned
     to cover their parent control.

    Make sure to comment out whichever version is not needed in your project.

    N.B. aria-expanded attribute is managed by JS
\*------------------------------------*/
/* stylelint-disable no-descending-specificity */
/* (Because the order reflects the DOM order, which Stylelint doesn't understand) */
/* Simple double level nav with vertical expansion */
#js-click-nav-vertical [data-trigger=sub-nav] {
  inline-size: 100%;
  justify-content: space-between;
}
#js-click-nav-vertical [data-trigger=sub-nav][aria-expanded=true] svg {
  transform: scaleY(-1);
}
@media screen and (min-width: 48em) {
  #js-click-nav-vertical [data-nav=submenu] {
    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.25);
  }
}

/* Double level nav with a "back" button in each sub menu */
#js-click-nav-horizontal [data-trigger=sub-nav] {
  inline-size: 100%;
  justify-content: space-between;
}
#js-click-nav-horizontal [data-trigger=sub-nav] svg {
  transform: rotate(-90deg);
}
@media screen and (min-width: 48em) {
  #js-click-nav-horizontal [data-trigger=sub-nav] svg {
    transform: none;
  }
}
@media screen and (min-width: 48em) {
  #js-click-nav-horizontal [data-trigger=sub-nav][aria-expanded=true] svg {
    transform: scaleY(-1);
  }
}
#js-click-nav-horizontal [data-nav=submenu] {
  inline-size: 100%;
  inset-block-start: 0;
  min-block-size: 100%;
  position: absolute;
  z-index: 5;
}
@media screen and (min-width: 48em) {
  #js-click-nav-horizontal [data-nav=submenu] {
    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.25);
    inline-size: auto;
    inset-block-start: auto;
    min-block-size: auto;
  }
}
#js-click-nav-horizontal [data-button=mobile-back] {
  inline-size: 100%;
  justify-content: flex-start;
}
@media screen and (min-width: 48em) {
  #js-click-nav-horizontal [data-button=mobile-back] {
    display: none;
  }
}
#js-click-nav-horizontal [data-button=mobile-back] svg {
  transform: rotate(90deg);
}

/* stylelint-enable no-descending-specificity */
/*------------------------------------*\
    #Navigation advanced: double level with both links and buttons

    A navigation where a button to toggle a sub menu is inserted directly after
    each top level link.

    N.B. aria-expanded attribute is managed by JS
\*------------------------------------*/
/* (Because the order reflects the DOM order, which Stylelint doesn't understand) */
#js-click-nav-both [data-trigger=sub-nav] {
  padding-inline: 0.5rem;
}
#js-click-nav-both [data-trigger=sub-nav][aria-expanded=true] svg {
  transform: scaleY(-1);
}
#js-click-nav-both ul > li:has([data-nav=submenu]) {
  align-items: center;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
}
#js-click-nav-both ul > li:has([data-nav=submenu]) a {
  inline-size: calc(100% - 2.75rem);
}
@media screen and (min-width: 48em) {
  #js-click-nav-both ul > li:has([data-nav=submenu]) a {
    inline-size: auto;
  }
}
#js-click-nav-both [data-nav=submenu] {
  flex-basis: 100%;
}
@media screen and (min-width: 48em) {
  #js-click-nav-both [data-nav=submenu] {
    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.25);
    inset-block-start: 100%;
  }
}

/*------------------------------------*\
    #Navigation advanced: double level with intro text

    The introductory text is hidden on smaller screens.
    On larger screens, the sub menus span the full viewport width.

    N.B. aria-expanded attribute is managed by JS
\*------------------------------------*/
/* stylelint-disable no-descending-specificity */
/* (Because the order reflects the DOM order, which Stylelint doesn't understand) */
#js-click-nav-intro [data-trigger=sub-nav] {
  inline-size: 100%;
  justify-content: space-between;
}
#js-click-nav-intro [data-trigger=sub-nav] svg {
  transform: rotate(-90deg);
}
@media screen and (min-width: 48em) {
  #js-click-nav-intro [data-trigger=sub-nav] svg {
    transform: none;
  }
}
@media screen and (min-width: 48em) {
  #js-click-nav-intro [data-trigger=sub-nav][aria-expanded=true] svg {
    transform: scaleY(-1);
  }
}
@media screen and (min-width: 48em) {
  #js-click-nav-intro > ul > li {
    position: static;
  }
}
#js-click-nav-intro [data-nav=submenu] {
  border-block-end: solid 3px;
  inline-size: 100%;
  inset-block-start: 0;
  min-block-size: 100%;
  padding: 1.25rem 0;
  position: absolute;
  z-index: 5;
}
@media screen and (min-width: 48em) {
  #js-click-nav-intro [data-nav=submenu] {
    inline-size: 100vw !important;
    inset-block-start: auto;
    inset-inline-start: 50%;
    min-block-size: auto;
    padding: 3.125rem 1.25rem;
    transform: translateX(-50%);
  }
}
@media screen and (min-width: 48em) {
  #js-click-nav-intro [data-nav=submenu] .l-center {
    display: flex;
    justify-content: space-between;
  }
}
#js-click-nav-intro [data-button=mobile-back] {
  inline-size: 100%;
  justify-content: flex-start;
}
@media screen and (min-width: 48em) {
  #js-click-nav-intro [data-button=mobile-back] {
    display: none;
  }
}
#js-click-nav-intro [data-button=mobile-back] svg {
  transform: rotate(90deg);
}
@media screen and (min-width: 48em) {
  #js-click-nav-intro [data-nav=submenu] .nav__intro {
    inline-size: 40%;
  }
}
#js-click-nav-intro [data-nav=submenu] .nav__intro + * {
  margin-block-start: 0;
}
#js-click-nav-intro .nav__intro p {
  display: none;
}
@media screen and (min-width: 48em) {
  #js-click-nav-intro .nav__intro p {
    display: block;
  }
}
@media screen and (min-width: 48em) {
  #js-click-nav-intro [data-nav=submenu] ul {
    column-gap: 2.5rem;
    columns: 2;
    inline-size: 50%;
  }
}

/* stylelint-enable no-descending-specificity */
/*------------------------------------*\
    #Plugins

    Add third-party plugins here.
    Add custom styles directly after the original in a separate file
\*------------------------------------*/
.autocomplete__wrapper {
  position: relative;
}

.autocomplete__hint,
.autocomplete__input {
  -webkit-appearance: none;
          appearance: none;
  border: 2px solid #0b0c0c;
  border-radius: 0; /* Safari 10 on iOS adds implicit border rounding. */
  box-sizing: border-box;
  margin-bottom: 0; /* BUG: Safari 10 on macOS seems to add an implicit margin. */
  line-height: 1.25;
  height: 2.5rem;
  width: 100%;
}

.autocomplete__input {
  background-color: transparent;
  position: relative;
}

.autocomplete__hint {
  color: #505a5f;
  position: absolute;
}

.autocomplete__input--default {
  padding: 5px;
}

.autocomplete__input--focused {
  outline: 3px solid #fd0;
  outline-offset: 0;
  box-shadow: inset 0 0 0 2px;
}

.autocomplete__input--show-all-values {
  padding: 5px 35px 5px 5px; /* Space for arrow. Other padding should match .autocomplete__input--default. */
  cursor: pointer;
}

.autocomplete__dropdown-arrow-down {
  z-index: -1;
  display: inline-block;
  position: absolute;
  right: 8px;
  width: 24px;
  height: 24px;
  top: 10px;
}

.autocomplete__menu {
  background-color: #ffffff;
  border: 2px solid #0b0c0c;
  border-top: 0;
  color: #0b0c0c;
  margin: 0;
  max-height: 342px;
  overflow-x: hidden;
  padding: 0;
  width: 100%;
  width: calc(100% - 4px);
}

.autocomplete__menu--visible {
  display: block;
}

.autocomplete__menu--hidden {
  display: none;
}

.autocomplete__menu--overlay {
  box-shadow: rgba(0, 0, 0, 0.256863) 0px 2px 6px;
  left: 0;
  position: absolute;
  top: 100%;
  z-index: 100;
}

.autocomplete__menu--inline {
  position: relative;
}

.autocomplete__option {
  border-bottom: solid #b1b4b6;
  border-width: 1px 0;
  cursor: pointer;
  display: block;
  position: relative;
}

.autocomplete__option > * {
  pointer-events: none;
}

.autocomplete__option:first-of-type {
  border-top-width: 0;
}

.autocomplete__option:last-of-type {
  border-bottom-width: 0;
}

.autocomplete__option--odd {
  background-color: #f3f2f1;
}

.autocomplete__option--focused,
.autocomplete__option:hover {
  background-color: #1d70b8;
  border-color: #1d70b8;
  color: white;
  outline: none;
}

@media (-ms-high-contrast: active), (forced-colors: active) {
  .autocomplete__menu {
    border-color: FieldText;
  }
  .autocomplete__option {
    background-color: Field;
    color: FieldText;
  }
  .autocomplete__option--focused,
  .autocomplete__option:hover {
    forced-color-adjust: none; /* prevent backplate from obscuring text */
    background-color: Highlight;
    border-color: Highlight;
    color: HighlightText;
    /* Prefer SelectedItem / SelectedItemText in browsers that support it */
    background-color: SelectedItem;
    border-color: SelectedItem;
    color: SelectedItemText;
    outline-color: SelectedItemText;
  }
}
.autocomplete__option--no-results {
  background-color: #f3f2f1;
  color: #505a5f;
  cursor: not-allowed;
}

.autocomplete__hint,
.autocomplete__input,
.autocomplete__option {
  font-size: 1rem;
  font-weight: 400;
}

.autocomplete__hint,
.autocomplete__option {
  padding: 5px;
}

@media (min-width: 641px) {
  .autocomplete__hint,
  .autocomplete__input,
  .autocomplete__option {
    font-size: 1.1875rem;
    line-height: 1.3157894737;
  }
}
/*------------------------------------*\
    #S24 accessible autocomplete overrides
\*------------------------------------*/
.autocomplete__hint,
.autocomplete__input {
  -webkit-appearance: none;
          appearance: none;
  border: 2px solid #8d8d8d;
}

.autocomplete__hint {
  color: #c6c6c6;
}

.autocomplete__input--focused {
  background-color: #fcfcfc;
  box-shadow: 0 0 0 4px #000;
  outline: 2px solid #ffdc00; /* 2 */
  outline-offset: 0; /* 2 */
}

[dir=rtl] .autocomplete__input--show-all-values {
  padding-left: 34px;
  padding-right: 5px;
}

.autocomplete__dropdown-arrow-down {
  pointer-events: none;
  z-index: initial;
}

[dir=rtl] .autocomplete__dropdown-arrow-down {
  left: 8px;
  right: auto;
}

.autocomplete__menu {
  border: 2px solid #8d8d8d;
}

.autocomplete__menu--overlay {
  top: calc(100% + 4px);
}

.autocomplete__option {
  margin-block-start: 0;
}

.autocomplete__option--odd {
  background-color: #e0e0e0;
}

.autocomplete__option--no-results {
  background-color: #c6c6c6;
  color: #252525;
}

.autocomplete__hint,
.autocomplete__input,
.autocomplete__option {
  font-size: clamp(0.875rem, 0.8rem + 0.375vw, 1.0625rem);
  line-height: 1.5;
  line-height: 1.25;
}

.autocomplete__option--focused,
.autocomplete__option:hover {
  background-color: #063a69;
  border-color: #063a69;
}

@media (width >= 641px) {
  .autocomplete__hint,
  .autocomplete__input,
  .autocomplete__option {
    font-size: clamp(0.875rem, 0.8rem + 0.375vw, 1.0625rem);
    line-height: 1.5;
    line-height: 1.25;
  }
}
@keyframes splide-loading {
  0% {
    transform: rotateZ(0);
  }
  100% {
    transform: rotateZ(360deg);
  }
}
.splide__track--draggable {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
      -ms-user-select: none;
          user-select: none;
}

.splide__track--fade > .splide__list > .splide__slide {
  margin: 0 !important;
  opacity: 0;
  z-index: 0;
}

.splide__track--fade > .splide__list > .splide__slide.is-active {
  opacity: 1;
  z-index: 1;
}

.splide--rtl {
  direction: rtl;
}

.splide__track--ttb > .splide__list {
  display: block;
}

.splide__container {
  box-sizing: border-box;
  position: relative;
}

.splide__list {
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
  display: flex;
  height: 100%;
  margin: 0 !important;
  padding: 0 !important;
}

.splide.is-initialized:not(.is-active) .splide__list {
  display: block;
}

.splide__pagination {
  align-items: center;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  margin: 0;
  pointer-events: none;
}

.splide__pagination li {
  display: inline-block;
  line-height: 1;
  list-style-type: none;
  margin: 0;
  pointer-events: auto;
}

.splide:not(.is-overflow) .splide__pagination {
  display: none;
}

.splide__progress__bar {
  width: 0;
}

.splide {
  position: relative;
  visibility: hidden;
}

.splide.is-initialized, .splide.is-rendered {
  visibility: visible;
}

.splide__slide {
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
  box-sizing: border-box;
  flex-shrink: 0;
  list-style-type: none !important;
  margin: 0;
  position: relative;
}

.splide__slide img {
  vertical-align: bottom;
}

.splide__spinner {
  animation: splide-loading 1s infinite linear;
  border: 2px solid #999;
  border-left-color: transparent;
  border-radius: 50%;
  bottom: 0;
  contain: strict;
  display: inline-block;
  height: 20px;
  left: 0;
  margin: auto;
  position: absolute;
  right: 0;
  top: 0;
  width: 20px;
}

.splide__sr {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

.splide__toggle__pause {
  display: none;
}

.splide__toggle.is-active .splide__toggle__play {
  display: none;
}

.splide__toggle.is-active .splide__toggle__pause {
  display: inline;
}

.splide__track {
  overflow: hidden;
  position: relative;
  z-index: 0;
}

/*------------------------------------*\
    #S24 customisation of Splide carousel
\*------------------------------------*/
[data-component=carousel] {
  margin-bottom: 6rem;
}

.splide__arrow {
  min-width: auto;
  padding-left: 0.25rem;
  padding-right: 0.25rem;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  z-index: 1;
}

.splide__arrow--prev {
  left: 0;
}
.splide__arrow--prev svg {
  transform: scaleX(-1);
}

.splide__arrow--next {
  right: 0;
}

.splide__arrow svg {
  height: 2rem;
  width: 2rem;
}

.splide__pagination {
  bottom: -3.125rem;
  left: 50%;
  position: absolute;
  transform: translateX(-50%);
  width: 100%;
}

.splide__pagination__page {
  background-color: transparent;
  border-color: transparent;
  height: 2.75rem;
  min-width: auto;
  position: relative;
  width: 2.75rem;
}
.splide__pagination__page:hover, .splide__pagination__page:focus {
  background-color: transparent;
  border-color: transparent;
}
.splide__pagination__page:focus-visible {
  background-color: #ffdc00;
  background-image: none;
  border-color: #000;
}
.splide__pagination__page::after {
  background-color: #1371c2;
  border-radius: 50%;
  content: "";
  height: 0.875rem;
  position: absolute;
  width: 0.875rem;
}
.splide__pagination__page[aria-selected=true]::after {
  background-color: transparent;
  border: solid 2px #1371c2;
}

/**
 * The tablist
 */
[role=tablist] {
  border-bottom: 1px solid rgb(211.15, 211.15, 211.15);
  list-style: none;
  margin: 0;
  padding: 0;
}
[role=tablist] * {
  box-sizing: border-box;
}

/**
 * The tablist item
 */
@media (min-width: 30em) {
  [role=tablist] li {
    display: inline-block;
  }
}

/**
 * The tabs
 */
[role=tab] {
  border: 1px solid transparent;
  border-top-color: rgb(211.15, 211.15, 211.15);
  display: block;
  padding: 0.5em 1em;
  text-decoration: none;
  /**
   * Active tab styling
   */
  /**
   * Tabs on hover
   */
}
@media (min-width: 30em) {
  [role=tab] {
    border-top-color: transparent;
    border-top-left-radius: 0.5em;
    border-top-right-radius: 0.5em;
    display: inline-block;
    margin-bottom: -1px;
  }
}
[role=tab][aria-selected=true] {
  background-color: rgb(211.15, 211.15, 211.15);
}
@media (min-width: 30em) {
  [role=tab][aria-selected=true] {
    background-color: transparent;
    border: 1px solid rgb(211.15, 211.15, 211.15);
    border-bottom-color: #ffffff;
  }
}
[role=tab]:hover:not([aria-selected=true]) {
  background-color: #f7f7f7;
}
@media (min-width: 30em) {
  [role=tab]:hover:not([aria-selected=true]) {
    border: 1px solid rgb(211.15, 211.15, 211.15);
  }
}

/**
 * [hidden] fallback for IE10 and lower
 */
[hidden] {
  display: none;
}

/*------------------------------------*\
    #S24 tabby overrides
\*------------------------------------*/
.component--tabs [role=tablist] {
  border-bottom: solid 1px #c6c6c6;
  display: flex;
  flex-flow: row nowrap;
  max-inline-size: 100%;
  overflow-x: auto;
  padding: 0 1.5rem;
}
.component--tabs [role=tablist] li {
  flex-shrink: 0;
  list-style: none;
  margin-top: 0;
  padding: 0;
}
.component--tabs [role=tablist] li + li {
  margin-left: 1.5rem;
}

[dir=rtl] .component--tabs [role=tablist] li + li {
  margin-left: 0;
  margin-right: 1.5rem;
}

.component--tabs a[role=tab] {
  background-color: #c6c6c6;
  border: 0;
  border-bottom: solid 0.1875rem transparent;
  border-radius: 0;
  color: #252525;
  display: block;
  margin-bottom: 0;
  padding: 0.625em 0.9375em;
  /**
  Unset focus styles (apart from transparent outline) where the browser wouldn't set a visible focus
   */
}
.component--tabs a[role=tab]:hover {
  background-color: #c6c6c6;
  border: 0;
  border-bottom: solid 0.1875rem #c6c6c6;
  color: #252525;
}
.component--tabs a[role=tab][aria-selected=true] {
  background-color: #c6c6c6;
  border-bottom: solid 0.1875rem #063a69;
  text-decoration: none;
}
.component--tabs a[role=tab]:focus {
  box-shadow: inset 0 0 0 4px #000;
  outline-offset: -4px;
}
.component--tabs a[role=tab]:focus:not(:focus-visible) {
  box-shadow: none;
}

.component--tabs [role=tabpanel] {
  padding: 1.5rem;
}
.component--tabs [role=tabpanel] > *:first-child {
  margin-block-start: 0;
}
