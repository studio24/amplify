/*------------------------------------*\
    #Sidebar layout helper

    From https://absolutely.every-layout.dev/layouts/sidebar/

    `.l-sidebar` creates a container for a larger panel next to
    a smaller - sidebar - panel.

    When there is enough horizontal space for them to sit alongside
    each other, they do so. Otherwise they stack vertically. The
    point at which this happens is determined by setting a flex-basis
    on the sidebar panel and a min-inline-size on the other panel.

    Because this layout uses Flexbox, we can use the `order`
    property on either `.not-sidebar` or `.sidebar` (depending upon
    the source order of the HTML) to determine whether the sidebar
    sits on the left or right side.

    We can add a gutter between the children of `.l-sidebar` using
    the flexbox gap property. Note: There is no spacing in browsers
    that don't support the flexbox gap property.
\*------------------------------------*/

.l-sidebar {
    @include cssvars((
        sidebar-content-width: 60%,
        sidebar-bar-width: rem(320),
        sidebar-gap: rem(20)
    ));
    display: flex;
    flex-wrap: wrap;
    gap: cssvar(sidebar-gap);

    /* Acts as an override for how spacing is handled inside forms,
     in case a <form> uses the `.l-sidebar` class directly. */
    > * + * {
        margin-top: 0;
    }
}


/**
Flex-basis determines the ideal width of the `.sidebar`. This can be
omitted to let the contents of `.sidebar` determine the width of
`.sidebar` (e.g. an image with a specified max-inline-size).
 */
.l-sidebar .sidebar {
	@include stack;
	flex-basis: cssvar(sidebar-bar-width);
	flex-grow: 1;
}

/**
Optional modifier class: unset the flex-basis to let the`.sidebar`
contents determine the width of `.sidebar` (e.g. a button, or
an image with a specified width or maximum width).
 */
.l-sidebar .sidebar--intrinsic {
    flex-basis: unset;
}


/**
The min-inline-size determines the point at which `.sidebar` and `.not-sidebar`
will sit side-by-side rather than vertically. This negates the use of a viewport
media query.
 */
.l-sidebar .content {
    flex-basis: 0;
    flex-grow: 999;
    min-inline-size: cssvar(sidebar-content-width);
}